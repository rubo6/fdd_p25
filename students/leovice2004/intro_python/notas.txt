# Notas Intro Python — Leonardo Villarreal Cerda

----------------------------------------
Sección A — Comando para invocar Python en mi máquina
- Comando elegido: python3 -V

----------------------------------------
Sección B — ¿Qué es el REPL? (en mis palabras)
- Descripción breve (1–2 líneas):
El REPL es un simulador de python en la terminal, en el cual se puede programar como si se tratara de un archivo .py y ejecuta los programas, aunque no se guardan de manera permanente.
----------------------------------------
Sección C — Script mínimo `hola.py`
- Qué contiene (enumera los elementos que incluiste):
En el script de hola.py agregue:
 1.- Un print("Hello humans")
 2.- una variable que ejecuta 5*10 y lo imprime
 3.- Una función que suma los primeros 5 números (0-4) y lo imprime
- Qué observé al ejecutarlo (resumen corto de la salida):
En la terminal observe Hello humans, 50 y 10
----------------------------------------
Sección D — Comandos/flags de Python ejecutados y observaciones
- -h:Mostró la ayuda general y las opciones de Python
- -V:Python 3.9.6
- -c Ejecutó "print('desde -c', 6*7)" como texto y mostró salida
- -i hola.py:Ejecutó el script y me dejó en REPL con variables/funciones cargadas”
- -m this: imprimió un poema
- -m antigravity: me llevó a una página en internet con comic de python

----------------------------------------
Sección E — __pycache__ y archivos .pyc
- ¿Cuándo aparece __pycache__?: Aparece después de ejecutar python3 hola.py si hola.py importa módulos o si Python compila el propio script.
- ¿Qué contiene?: Normalmente verás archivos con extensión .pyc que contienen bytecode.
-dis: python3 -c "import dis, hola; dis.dis(hola)" "LOAD_CONST , STORE_FAST"
- -B (observación): No se creó __pycache__/ (no se escriben .pyc).
- -O (observación): Se crean .pyc optimizados; los assert no se evalúan
- -OO (observación): .pyc optimizados; además pueden eliminarse docstrings.

----------------------------------------
Sección F — `dis` (inspección de bytecode)
- Comando que usé: python3 -c "import dis, hola; dis.dis(hola)"
- Lo que observé (menciona 1–2 cosas que notaste): "LOAD_CONST , STORE_FAST"

----------------------------------------
Sección G — Conclusión corta
- 1–3 líneas con tu reflexión principal: El poder utilizar python desde la terminal ayuda a eficientar procesos y a tener mayor control sobre lo que se está haciendo. 
