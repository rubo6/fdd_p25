# Notas Intro Python — Tomas Boom Sanchez

----------------------------------------
Sección A — Comando para invocar Python en mi máquina
- Comando elegido: python3

----------------------------------------
Sección B — ¿Qué es el REPL? (en mis palabras)
- Descripción breve (1–2 líneas): un programa que lee lo que escribes, evalua, lo interpreta, lo ejecuta, imprime el resultado y vuelve al inicio

----------------------------------------
Sección C — Script mínimo `hola.py`
- Qué contiene (enumera los elementos que incluiste):
print("hola")
resultado= 5 * 29 + 2
print("El resultado de la operación es:", resultado)
def cuadrado(numero):
    return numero ** 2
print("El cuadrado de 4 es:", cuadrado(4))

- Qué observé al ejecutarlo (resumen corto de la salida):
Que devolvio la palabra hola gracias al print, creo la variable resultado y la ejecuto para despues imprimir la variable. Se declaro la funcion cuadrado y despues se probo con el numero 4 e imprimio el resultado. 
----------------------------------------
Sección D — Comandos/flags de Python ejecutados y observaciones
- -h: Mostró la ayuda general y las opciones de Python
- -V: Python 3.12.3 
- -c "...": Ejecutó código pasado como texto y mostró la salida
- -i hola.py: Ejecutó el script y me dejó en REPL con variables/funciones cargadas
- -m this: ejecuta y te devuelve el texto de un poema o un escrito de python 
- -m antigravity: te abre una pestaña en tu navegador y te presenta una pagina con muchos comics 

----------------------------------------
Sección E — __pycache__ y archivos .pyc
- ¿Cuándo aparece __pycache__?: Aparece cuando un módulo de Python es importado o compilado
- ¿Qué contiene?:Contiene los archivos compilados en bytecode con extensión .pyc, por ejemplo hola.cpython-312.pyc
- -B (observación): No se creó __pycache__/ (no se escriben .pyc)
- -O (observación): Se crean .pyc optimizados; los assert no se evalúan.
- -OO (observación): .pyc optimizados; además pueden eliminarse docstrings.

----------------------------------------
Sección F — `dis` (inspección de bytecode)
- Comando que usé: python3 -c "import dis, hola; dis.dis(hola)"
- Lo que observé (menciona 1–2 cosas que notaste): vi instrucciones de bytecode como LOAD_CONST y CALL_FUNCTION 

----------------------------------------
Sección G — Conclusión corta
- 1–3 líneas con tu reflexión principal:
Despues de hacer este ejercicio me di cuenta de muchas cosas que no sabia de python, aprendi funciones y comandos que no sabia que existian y cosas divertidas de python como this y antigravity
